#!/usr/bin/env sh

# This is a wrapper script, that automatically download morphir from GitHub release pages
# You can give the required morphir version with --morphir-version parameter
# If no version is given, it falls back to the value of DEFAULT_MORPHIR_VERSION
#
# Project page: https://github.com/lefou/morphirw
# Script Version: 0.4.8
#
# If you want to improve this script, please also contribute your changes back!
#
# Licensed under the Apache License, Version 2.0

set -e

if [ -z "${DEFAULT_MORPHIR_VERSION}" ] ; then
  DEFAULT_MORPHIR_VERSION="0.11.1"
fi


if [ -z "${GITHUB_RELEASE_CDN}" ] ; then
  GITHUB_RELEASE_CDN=""
fi


MORPHIR_REPO_URL="https://github.com/com-lihaoyi/morphir"

if [ -z "${CURL_CMD}" ] ; then
  CURL_CMD=curl
fi

# Explicit commandline argument takes precedence over all other methods
if [ "$1" = "--morphir-version" ] ; then
  shift
  if [ "x$1" != "x" ] ; then
    MORPHIR_VERSION="$1"
    shift
  else
    echo "You specified --morphir-version without a version." 1>&2
    echo "Please provide a version that matches one provided on" 1>&2
    echo "${MORPHIR_REPO_URL}/releases" 1>&2
    false
  fi
fi

# Please note, that if a MORPHIR_VERSION is already set in the environment,
# We reuse it's value and skip searching for a value.

# If not already set, read .morphir-version file
if [ -z "${MORPHIR_VERSION}" ] ; then
  if [ -f ".morphir-version" ] ; then
    MORPHIR_VERSION="$(head -n 1 .morphir-version 2> /dev/null)"
  elif [ -f ".config/morphir-version" ] ; then
    MORPHIR_VERSION="$(head -n 1 .config/morphir-version 2> /dev/null)"
  fi
fi

if [ -z "${MORPHIR_DOWNLOAD_PATH}" ] ; then
  if [ -n "${XDG_CACHE_HOME}" ] ; then
    MORPHIR_DOWNLOAD_PATH="${XDG_CACHE_HOME}/morphir/download"
  else
    MORPHIR_DOWNLOAD_PATH="${HOME}/.cache/morphir/download"
  fi
fi

# If not already set, try to fetch newest from Github
if [ -z "${MORPHIR_VERSION}" ] ; then
  # TODO: try to load latest version from release page
  echo "No morphir version specified." 1>&2
  echo "You should provide a version via '.morphir-version' file or --morphir-version option." 1>&2

  mkdir -p "${MORPHIR_DOWNLOAD_PATH}"
  LANG=C touch -d '1 hour ago' "${MORPHIR_DOWNLOAD_PATH}/.expire_latest" 2>/dev/null || (
    # we might be on OSX or BSD which don't have -d option for touch
    # but probably a -A [-][[hh]mm]SS
    touch "${MORPHIR_DOWNLOAD_PATH}/.expire_latest"; touch -A -010000 "${MORPHIR_DOWNLOAD_PATH}/.expire_latest"
  ) || (
    # in case we still failed, we retry the first touch command with the intention
    # to show the (previously suppressed) error message
    LANG=C touch -d '1 hour ago' "${MORPHIR_DOWNLOAD_PATH}/.expire_latest"
  )

  # POSIX shell variant of bash's -nt operator, see https://unix.stackexchange.com/a/449744/6993
  # if [ "${MORPHIR_DOWNLOAD_PATH}/.latest" -nt "${MORPHIR_DOWNLOAD_PATH}/.expire_latest" ] ; then
  if [ -n "$(find -L "${MORPHIR_DOWNLOAD_PATH}/.latest" -prune -newer "${MORPHIR_DOWNLOAD_PATH}/.expire_latest")" ]; then
    # we know a current latest version
    MORPHIR_VERSION=$(head -n 1 "${MORPHIR_DOWNLOAD_PATH}"/.latest 2> /dev/null)
  fi

  if [ -z "${MORPHIR_VERSION}" ] ; then
    # we don't know a current latest version
    echo "Retrieving latest morphir version ..." 1>&2
    LANG=C ${CURL_CMD} -s -i -f -I ${MORPHIR_REPO_URL}/releases/latest 2> /dev/null  | grep --ignore-case Location: | sed s'/^.*tag\///' | tr -d '\r\n' > "${MORPHIR_DOWNLOAD_PATH}/.latest"
    MORPHIR_VERSION=$(head -n 1 "${MORPHIR_DOWNLOAD_PATH}"/.latest 2> /dev/null)
  fi

  if [ -z "${MORPHIR_VERSION}" ] ; then
    # Last resort
    MORPHIR_VERSION="${DEFAULT_MORPHIR_VERSION}"
    echo "Falling back to hardcoded morphir version ${MORPHIR_VERSION}" 1>&2
  else
    echo "Using morphir version ${MORPHIR_VERSION}" 1>&2
  fi
fi

MORPHIR="${MORPHIR_DOWNLOAD_PATH}/${MORPHIR_VERSION}"

try_to_use_system_morphir() {
  MORPHIR_IN_PATH="$(command -v morphir || true)"

  if [ -z "${MORPHIR_IN_PATH}" ]; then
    return
  fi

  UNIVERSAL_SCRIPT_MAGIC="@ 2>/dev/null # 2>nul & echo off & goto BOF"

  if ! head -c 128 "${MORPHIR_IN_PATH}" | grep -qF "${UNIVERSAL_SCRIPT_MAGIC}"; then
    if [ -n "${MORPHIRW_VERBOSE}" ]; then
      echo "Could not determine morphir version of ${MORPHIR_IN_PATH}, as it does not start with the universal script magic2" 1>&2
    fi
    return
  fi

  # Roughly the size of the universal script.
  MORPHIR_VERSION_SEARCH_RANGE="2403"
  MORPHIR_IN_PATH_VERSION=$(head -c "${MORPHIR_VERSION_SEARCH_RANGE}" "${MORPHIR_IN_PATH}" |\
                         sed -n 's/^.*-DMORPHIR_VERSION=\([^\s]*\) .*$/\1/p' |\
                         head -n 1)

  if [ -z "${MORPHIR_IN_PATH_VERSION}" ]; then
    echo "Could not determine morphir version, even though ${MORPHIR_IN_PATH} has the universal script magic" 1>&2
    return
  fi

  if [ "${MORPHIR_IN_PATH_VERSION}" = "${MORPHIR_VERSION}" ]; then
    MORPHIR="${MORPHIR_IN_PATH}"
  fi
}
try_to_use_system_morphir

# If not already downloaded, download it
if [ ! -s "${MORPHIR}" ] ; then

  # support old non-XDG download dir
  MORPHIR_OLD_DOWNLOAD_PATH="${HOME}/.morphir/download"
  OLD_MORPHIR="${MORPHIR_OLD_DOWNLOAD_PATH}/${MORPHIR_VERSION}"
  if [ -x "${OLD_MORPHIR}" ] ; then
    MORPHIR="${OLD_MORPHIR}"
  else
    case $MORPHIR_VERSION in
      0.0.* | 0.1.* | 0.2.* | 0.3.* | 0.4.* )
        DOWNLOAD_SUFFIX=""
        DOWNLOAD_FROM_MAVEN=0
        ;;
      0.5.* | 0.6.* | 0.7.* | 0.8.* | 0.9.* | 0.10.* | 0.11.0-M* )
        DOWNLOAD_SUFFIX="-assembly"
        DOWNLOAD_FROM_MAVEN=0
        ;;
      *)
        DOWNLOAD_SUFFIX="-assembly"
        DOWNLOAD_FROM_MAVEN=1
        ;;
    esac

    DOWNLOAD_FILE=$(mktemp morphir.XXXXXX)

    if [ "$DOWNLOAD_FROM_MAVEN" = "1" ] ; then
      DOWNLOAD_URL="https://repo1.maven.org/maven2/com/lihaoyi/morphir-dist/${MORPHIR_VERSION}/morphir-dist-${MORPHIR_VERSION}.jar"
    else
      MORPHIR_VERSION_TAG=$(echo $MORPHIR_VERSION | sed -E 's/([^-]+)(-M[0-9]+)?(-.*)?/\1\2/')
      DOWNLOAD_URL="${GITHUB_RELEASE_CDN}${MORPHIR_REPO_URL}/releases/download/${MORPHIR_VERSION_TAG}/${MORPHIR_VERSION}${DOWNLOAD_SUFFIX}"
      unset MORPHIR_VERSION_TAG
    fi

    # TODO: handle command not found
    echo "Downloading morphir ${MORPHIR_VERSION} from ${DOWNLOAD_URL} ..." 1>&2
    ${CURL_CMD} -f -L -o "${DOWNLOAD_FILE}" "${DOWNLOAD_URL}"
    chmod +x "${DOWNLOAD_FILE}"
    mkdir -p "${MORPHIR_DOWNLOAD_PATH}"
    mv "${DOWNLOAD_FILE}" "${MORPHIR}"

    unset DOWNLOAD_FILE
    unset DOWNLOAD_SUFFIX
  fi
fi

if [ -z "$MORPHIR_MAIN_CLI" ] ; then
  MORPHIR_MAIN_CLI="${0}"
fi

MORPHIR_FIRST_ARG=""
if [ "$1" = "--bsp" ] || [ "$1" = "-i" ] || [ "$1" = "--interactive" ] || [ "$1" = "--no-server" ] || [ "$1" = "--repl" ] || [ "$1" = "--help" ] ; then
  # Need to preserve the first position of those listed options
  MORPHIR_FIRST_ARG=$1
  shift
fi

unset MORPHIR_DOWNLOAD_PATH
unset MORPHIR_OLD_DOWNLOAD_PATH
unset OLD_MORPHIR
unset MORPHIR_VERSION
unset MORPHIR_REPO_URL

# We don't quote MORPHIR_FIRST_ARG on purpose, so we can expand the empty value without quotes
# shellcheck disable=SC2086
exec "${MORPHIR}" $MORPHIR_FIRST_ARG -D "morphir.main.cli=${MORPHIR_MAIN_CLI}" "$@"
